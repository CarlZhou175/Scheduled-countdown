{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/mathiashalen/Documents/GitHub/Scheduled-countdown-expo/MobileVersion/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport socketIOClient from \"socket.io-client\";\nvar ENDPOINT = \"http://192.168.8.146:3000\";\nexport default function App() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  useEffect(function () {\n    var socket = socketIOClient(ENDPOINT);\n    var countDownString;\n    var countDownTimeInMS;\n    var showNowClock;\n    var newCurrentTime;\n    var startTitleHolder;\n    var offsetTimeInit;\n    socket.on(\"centerTextContent\", function (data) {\n      countDownString = data.countDownString;\n      countDownTimeInMS = data.countDownTimeInMS;\n      showNowClock = data.showNowClock;\n      newCurrentTime = data.newCurrentTime;\n      startTitleHolder = data.startTitleHolder;\n      offsetTimeInit = data.offsetTimeInit;\n      setResponse(data.countDownString);\n    });\n  }, []);\n\n  function myVibrations() {\n    Vibration.vibrate(PATTERN);\n    console.log(\"----------> myVibrations\");\n    var socket = socketIOClient(ENDPOINT);\n    socket.on(\"centerTextContent\", function (data) {\n      var now = data.countDownTimeInMS;\n\n      if (now != 0) {\n        Vibration.vibrate(PATTERN, true);\n      } else {\n        Vibration.vibrate(PATTERN, false);\n      }\n    });\n  }\n\n  ;\n  myVibrations();\n  var ONE_SECOND_IN_MS = 1000;\n  var PATTERN = [100, 100, 100, 100];\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, response), React.createElement(Button, {\n    title: \"Vibrate once\",\n    onPress: function onPress() {\n      return Vibration.vibrate(PATTERN, true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#2b2b2b',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text: {\n    color: \"white\",\n    fontSize: 100\n  }\n});","map":{"version":3,"sources":["/Users/mathiashalen/Documents/GitHub/Scheduled-countdown-expo/MobileVersion/App.js"],"names":["StatusBar","React","useState","useEffect","socketIOClient","ENDPOINT","App","response","setResponse","socket","countDownString","countDownTimeInMS","showNowClock","newCurrentTime","startTitleHolder","offsetTimeInit","on","data","myVibrations","Vibration","vibrate","PATTERN","console","log","now","ONE_SECOND_IN_MS","styles","container","text","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","color","fontSize"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from \"react\";\nimport { StyleSheet, Text, View , Vibration , Platform, Button} from 'react-native';\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://192.168.8.146:3000\";\n\nexport default function App() {\n  //-- SocketIO\n    const [response, setResponse] = useState(\"\");\n    useEffect(() => {\n      const socket = socketIOClient(ENDPOINT);\n      var countDownString;\n      var countDownTimeInMS;\n      var showNowClock;\n      var newCurrentTime;\n      var startTitleHolder;\n      var offsetTimeInit;\n\n      socket.on(\"centerTextContent\", data => {\n        countDownString     = data.countDownString;\n        countDownTimeInMS   = data.countDownTimeInMS;\n        showNowClock        = data.showNowClock;\n        newCurrentTime      = data.newCurrentTime;\n        startTitleHolder    = data.startTitleHolder;\n        offsetTimeInit      = data.offsetTimeInit;\n\n        \n        setResponse(data.countDownString);\n      });\n\n\n    }, []);\nfunction myVibrations(){\n  Vibration.vibrate(PATTERN);\n  console.log(\"----------> myVibrations\");\n  const socket = socketIOClient(ENDPOINT);\n  socket.on(\"centerTextContent\", data => {\n    // console.log(data.countDownTimeInMS);\n    var now = data.countDownTimeInMS;\n    if (now != 0 ) {\n      Vibration.vibrate(PATTERN,true)\n    }else {\n      Vibration.vibrate(PATTERN,false)\n    }\n  });\n};\nmyVibrations();\n  //-- SocketIO\n\n\n\n\n  //---------- VIBRATION\n  const ONE_SECOND_IN_MS = 1000;\n  const PATTERN = [100,100,100,100];\n  //---------- VIBRATION\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>{response}</Text>\n      <Button title=\"Vibrate once\" onPress={() => Vibration.vibrate(PATTERN,true)} />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#2b2b2b',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text:{\n    color:\"white\",\n    fontSize: 100,\n  }\n});\n"]},"metadata":{},"sourceType":"module"}